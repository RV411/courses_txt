Descargar imagen sonar
docker pull sonarqube

Crear contenedor de sonar
docker run -d --name sonarqube -p 9000:9000 -p 9092:9092 sonarqube

crear red virtual
docker network create jenkins_sonarqube

verificar redes
docker network ls

conectar los contenedores a la red virtual
docker network connect jenkins_sonarqube sonarqube
 docker network connect jenkins_sonarqube reverent_robinson (cambiar por el nombre que cada uno tenga para el contendor jenkins)

Ver los detalles de un contenedor 
docker container inspect sonarqube 



#### SonarQUBE
parametros de la configuración del paso referente a sonar
Ir a administration > security > add scan
sonarscan





####	Configurar en el pipeline "webhooks_pipeline"
Propiedades usadas en la configuracion del pipeline para añadir el paso de sponarqube
sonar.projectKey=sonarqube
sonar.sources=billing/src/main/java
sonar.java.binaries=billing/target/classes


-X




Configurar el agente de docker para construir la imagen en el pipeline
plugin que debe ser instalado 
CloudBees Docker Build and Publish



nombre de imagen
cuentadockerhub/billingapp-backend


url del agente
tcp://172.17.0.1:2375
tcp://ip_publica:puerto_por_defecto_docker


contexto para la imagen del backend
billing/


argumentos adicionales
--build-arg  JAR_FILE=target/*.jar


ruta del fichero que se debe editar en el host para exponer el api del daemon de docker usar nano o vi con sudo para poder guardar
sudo nano /lib/systemd/system/docker.service
	ajustar el contenido de la linea para que quede como esta 
		ExecStart=/usr/bin/dockerd -H fd:// -H=tcp://0.0.0.0:2375
		ExecStart=/usr/bin/dockerd -H unix:// -D -H tcp://127.0.0.1:2375


Reiniciar servicios
sudo systemctl daemon-reload
sudo service docker restart


verificar y/o reiniciar contenedores de docker (docker ps -> ver contendores activos  docker ps -a -> ver todos)
Comprobar que el api es accesible mediante el protocolo http con el sigueinte comando o en un navegador
curl http://localhost:2375/images/json

Hacer puente entre el contenedor de jenkis y el host local para acceder al docker daemon mediante tcp
ip route show default | awk '/default/ {print $3}'

despues
ip a
	
buscar la red de docker 01 y usarla en lugar de localhost, en la configuracion del plugin en el pipeline deberia ser (172.17.0.1) o similar
	docker0:
	172.17.0.1




KUBERNETES

Configurar la integracion con kubernetes
conectarse como root en jenkis e installar el kubectl
docker exec -it --user=root jenkins /bin/bash
	instalar kubectl
	mover	mv ./kubectl /usr/local/bin/kubectl
	kubectl version --client
	exit

conectar jenkis a la red de minikube 
(docker network ls)
docker network connect minikube jenkins
docker container inspect jenkins
	**Siempre desconectarlo del contenedor
		docker network connect minikube jenkins

plugin que debe ser instalado 
Kubernetes plugin

ver la configuracion de minikube
kubectl config view

consultar los server account  
kubectl --namespace default get serviceaccount

vel el detalle del server account 
kubectl --namespace default get serviceaccount jenkins -o yaml

obtener el token del server account
kubectl describe secrets/jenkins-token-rk2mg
